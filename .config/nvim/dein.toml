[[plugins]] # plugin manager
repo = "Shougo/dein.vim"

[[plugins]] # asynchronous
repo = "Shougo/vimproc.vim"
build = "make"

[[plugins]] # status line
repo = "itchyny/lightline.vim"
hook_add = """
    set noshowmode
    let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ }
        \ }

    function! LightlineModified()
      return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightlineReadonly()
      return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction

    function! LightlineFilename()
      return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'unite' ? unite#get_status_string() :
            \  &ft == 'vimshell' ? vimshell#get_status_string() :
            \ '' != expand('%') ? expand('%:~') : '[No Name]') .
            \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
    endfunction

    function! LightlineFugitive()
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
      else
        return ''
      endif
    endfunction

    function! LightlineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightlineFiletype()
      return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! LightlineFileencoding()
      return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! LightlineMode()
      return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
"""

[[plugins]] # directory tree
repo = "scrooloose/nerdtree"
hook_add = """
    nnoremap <silent><C-n> :NERDTreeToggle<CR>
    let g:NERDTreeShowBookmarks = 1
    let g:NERDTreeShowHidden = 1
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"""

[[plugins]] # comment out
repo = "tyru/caw.vim"
hook_add = """
    nmap <Leader>, <Plug>(caw:hatpos:toggle)
    vmap <Leader>, <Plug>(caw:hatpos:toggle)
    nmap <Leader>c <Plug>(caw:zeropos:toggle)
    vmap <Leader>c <Plug>(caw:zeropos:toggle)
"""

[[plugins]] # auto-complete
repo = "Shougo/deoplete.nvim"
hook_add = """
    let g:deoplete#enable_at_startup = 1
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

    inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

    inoremap <expr><C-g>       deoplete#refresh()
    inoremap <silent><expr><C-l>       deoplete#complete_common_string()

    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
      return deoplete#cancel_popup() . "\<CR>"
    endfunction

    inoremap <expr> '  pumvisible() ? deoplete#close_popup() : "'"

    let g:deoplete#keyword_patterns = {}
    let g:deoplete#keyword_patterns._ = '[a-zA-Z_]\k*\(?'
    let g:deoplete#keyword_patterns.tex = '[^\w|\s][a-zA-Z_]\w*'

    let g:deoplete#omni#input_patterns = {}
    let g:deoplete#omni#input_patterns.python = ''
    let g:deoplete#omni#functions = {}
    let g:deoplete#enable_refresh_always = 0
    let g:deoplete#enable_camel_case = 1

    let g:deoplete#skip_chars = ['(', ')']
    set completeopt-=preview
"""

[[plugins]] # run code
repo = "thinca/vim-quickrun"
hook_add = """
    let g:quickrun_config = get(g:, "quickrun_config", {})
    let g:quickrun_config._ = {
        \ "runner": "vimproc",
        \ "runner/vimproc/updatetime": 60,
        \ "outputter": "error",
        \ "outputter/error/success": "buffer",
        \ "outputter/error/error": "quickfix",
        \ "outputter/buffer/split": "rightbelow 8sp",
        \ "outputter/buffer/close_on_empty": 1,
        \ }
"""

[[plugins]] # matcher of denite
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]] # file recently use
repo = 'Shougo/neomru.vim'

[[plugins]] # record yank
repo = 'Shougo/neoyank.vim'

[[plugins]] # file manager
repo = "Shougo/denite.nvim"
hook_post_update = """
    if executable('rg')
      call denite#custom#var('file_rec', 'command',
            \ ['rg', '--files', '--glob', '!.git'])
      call denite#custom#var('grep', 'command', ['rg'])
    endif
    call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
"""
hook_add = """
    nmap [Denite] <Nop>
    nmap <C-u> [Denite]
    nmap <silent> [Denite]<C-t> :<C-u>Denite filetype<CR>
    nmap <silent> [Denite]<C-p> :<C-u>Denite file_rec<CR>
    nmap <silent> [Denite]<C-l> :<C-u>Denite line<CR>
    nmap <silent> [Denite]<C-g> :<C-u>Denite -auto-preview grep<CR>
    nmap <silent> [Denite]<C-w> :<C-u>DeniteCursorWord grep<CR>
    nmap <silent> [Denite]<C-u> :<C-u>Denite file_mru<CR>
    nmap <silent> [Denite]<C-y> :<C-u>Denite neoyank<CR>
    nmap <silent> [Denite]<C-r> :<C-u>Denite -resume<CR>
    nmap <silent> [Denite]; :<C-u>Denite -resume -immediately -select=+1<CR>
    nmap <silent> [Denite], :<C-u>Denite -resume -immediately -select=-1<CR>
    nmap <silent> [Denite]<C-d> :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/dotfiles']}])<CR>
    " customize ignore globs
    call denite#custom#source('file_rec', 'matchers', ['matcher_fuzzy','matcher_ignore_globs'])
    call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
          \ [
          \ '.git/', 'build/', '__pycache__/',
          \ 'images/', '*.o', '*.make',
          \ '*.min.*', 'node_modules/',
          \ 'img/', 'fonts/'])
"""


[[plugins]] # git cliant
repo = "tpope/vim-fugitive"
hook_add = """
    nmap [figitive] <Nop>
    map <Leader>g [figitive]
    nmap <silent> [figitive]s :<C-u>Gstatus<CR>
    nmap <silent> [figitive]d :<C-u>Gdiff<CR>
    nmap <silent> [figitive]b :<C-u>Gblame<CR>
    nmap <silent> [figitive]l :<C-u>Glog<CR>
"""

[[plugins]] # show git change
repo = "airblade/vim-gitgutter"

[[plugins]] # indent guides
repo = "Yggdroot/indentLine"
hook_add = """
    let g:indentLine_color_term = 008
    let g:indentLine_char = "Â¦"
    nmap <silent> <C-j> :IndentLinesToggle<CR>:set number!<CR>
"""

[[plugins]] # snippet
repo = "Shougo/neosnippet.vim"
hook_add = """
    imap <C-l> <Plug>(neosnippet_expand_or_jump)
    smap <C-l> <Plug>(neosnippet_expand_or_jump)
    xmap <C-l> <Plug>(neosnippet_expand_target)
    if has("conceal")
        set conceallevel=2 concealcursor=niv
    endif
    let g:neosnippet#snippets_directory="~/.config/nvim/snippets/"
"""

[[plugins]] # snippet list
repo = "Shougo/neosnippet-snippets"

[[plugins]] # show space
repo = "bronson/vim-trailing-whitespace"


[[plugins]] # memo
repo = "glidenote/memolist.vim"
hook_add = """
    let g:memolist_path = expand("~/Dropbox/memo")
    let g:memolist_memo_suffix = "md"
    let g:memolist_denite = 1
    let g:memolist_prompt_tags = 1
    function! s:memoGrepDenite()
        let l:option = '-path=' . g:memolist_path
        exe 'Denite' '-auto-preview' 'grep' l:option
    endfunction

    command! MemoGrepDenite call s:memoGrepDenite()
    nnoremap <Leader>mn :MemoNew<CR>
    nnoremap <Leader>ml :MemoList<CR>
    nnoremap <Leader>mg :MemoGrepDenite<CR>
"""
