snippet     python
abbr        initializing python
options     head
	#!/usr/bin/env python
	# coding: utf-8
	"""
	${1:#:purpose}
	
	===Usage===
	`expand("%:t")` <${2:input}> -o <output>
	
	===Input===
	<$2> : ${3:input description}
	-o <output> : output file name(default:<$2>.${4:out})
	
	===Output===
	<output> : ${5:output description}
	
	"""
	import argparse
	
	
	def parse_argument():
	    parser = argparse.ArgumentParser(usage=__doc__)
	    parser.add_argument("$2",
	                        type=str,
	                        default=None,
	                        help="$3")
	    parser.add_argument("-o", "--output",
	                        type=str,
	                        default=None,
	                        help="output file name")
	    arguments = parser.parse_args()
	    if arguments.output is None:
	        arguments.output = arguments.$2 + ".$4"
	    return arguments
	
	
	def main():
	    args = parse_argument()
	
	    ${0:pass}
	
	
	if __name__ == "__main__":
	    main()

snippet     module
abbr        initializing python module
options     head
	#!/usr/bin/env python
	# coding: utf-8
	"""
	${1:#:purpose}
	===Class===
	===Function===
	"""

snippet     function
abbr        initializing python function
options     head
	def ${1:function}(${2:#:argument}):
	    """
	    ===Input===
	    ${3:#:input}
	    ===Output===
	    ${4:#:output}
	    """
	    ${0:pass}


snippet     kaggle
abbr        kaggle initialization
options     head
	#!/usr/bin/env python3
	# coding: utf-8
	"""
	For ${1:`substitute(substitute(expand("%:p"), "/[^/]*/[^/]*$", "", "g"), ".*/", "", "g")`} competition
	
	Author: Riku Okajima
	Created: `strftime("%Y-%m-%d")`
	"""
	
	import numpy as np
	import matplotlib.pyplot as plt
	import pandas as pd
	from tqdm import tqdm
	from logging import (getLogger, DEBUG, INFO,
	                     StreamHandler, FileHandler, Formatter)
	
	
	def get_logger(name, out=None):
	    formatter = Formatter(
	        "%(asctime)s:%(levelname)s:%(name)s::%(funcName)s::%(message)s")
	    logger = getLogger(name)
	    logger.setLevel(DEBUG)
	    handler = StreamHandler()
	    handler.setLevel(INFO)
	    handler.setFormatter(formatter)
	    logger.addHandler(handler)
	    if out is not None:
	        handler = FileHandler(out)
	        handler.setLevel(DEBUG)
	        handler.setFormatter(formatter)
	        logger.addHandler(handler)
	    return logger
	
	
	${0:pass}
