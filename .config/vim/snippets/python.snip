snippet     shebang
options     head
	#!/usr/bin/env python
	# coding: utf-8


snippet     module
abbr        initialize python module
options     head
	#!/usr/bin/env python
	# coding: utf-8
	"""
	${1:#:purpose}
	"""
	__author__ = "Riku Okajima<riku.okajima@gmail.com>"
	__date__ = "`strftime("%Y-%m-%d")`"


snippet     python
abbr        initialize python
options     head
	#!/usr/bin/env python
	# coding: utf-8
	"""
	${1:#:purpose}
	"""
	__author__ = "Riku Okajima<riku.okajima@gmail.com>"
	__date__ = "`strftime("%Y-%m-%d")`"

	import argparse
	from typing import List, Optional


	def get_args(argv: Optional[List[str]]=None) -> argparse.Namespace:
	    """
	    get arguments from command line
	    """
	    parser = argparse.ArgumentParser(description=__doc__)
	    ${0}
	    args = parser.parse_args(argv)
	    return args


	def main() -> None:
	    """
	    main function
	    """
	    pass


	if __name__ == "__main__":
	    main(**vars(get_args()))


snippet     python2
abbr        initialize python
options     head
	#!/usr/bin/env python
	# coding: utf-8
	"""
	${1:#:purpose}
	"""
	__author__ = "Riku Okajima<riku.okajima@gmail.com>"
	__date__ = "`strftime("%Y-%m-%d")`"

	import argparse


	def get_args():
	    """
	    get arguments from command line
	    """
	    parser = argparse.ArgumentParser(description=__doc__)
	    ${0}
	    args = parser.parse_args()
	    return args


	def main():
	    """
	    main function
	    """
	    pass


	if __name__ == "__main__":
	    main(**vars(get_args()))


snippet     argument
abbr        add argument
options     head
	parser.add_argument(
	    "${1:temp}",
	    action="${2:store}",
	    nargs=${3:1},
	    const=${4:None},
	    default=${5:None},
	    type=${6:str},
	    choices=[${7}],
	    required=${8:False},
	    help="${0:help message}"
	)


snippet     outfile
abbr        add output argument
options     head
	parser.add_argument(
	    "-o", "--outfile",
	    nargs="?",
	    type=str,
	    default=None,
	    help="output file name"
	)
	if args.outfile is None:
	    args.outfile = args.${1:infile} + ".${0:out}"


snippet     test
abbr        test code
options     head
	#!/usr/bin/env python
	# coding: utf-8
	"""
	${1:#:purpose}
	"""
	__author__ = "Riku Okajima<riku.okajima@gmail.com>"
	__date__ = "`strftime("%Y-%m-%d")`"

	import unittest


	class ${2:My}Test(unittest.TestCase):

	    def setUp(self):
	        """
	        prepare the test fixture
	        """
	        pass

	    def tearDown(self):
	        """
	        called after test function
	        """
	        pass

	    def test_${0:main}(self):
	        """
	        main test
	        """
	        pass


	if __name__ == '__main__':
	    unittest.main()



snippet     log_start_end
abbr        logging start and end
options     head
	import logging
	from contextlib import ContextDecorator


	class time_stamp(ContextDecorator):
	    logger = logging.getLogger(__name__)
	    formater = logging.Formatter("%(asctime)s::%(module)s::%(message)s")
	    ch = logging.StreamHandler()
	    ch.setLevel(logging.DEBUG)
	    ch.setFormatter(formater)
	    logger.addHandler(ch)

	    def __init__(self, name):
	        self.name = name

	    def __enter__(self):
	        time_stamp.logger.debug("{} start".format(self.name))

	    def __exit__(self, *exc):
	        time_stamp.logger.debug("{} end".format(self.name))

	    @classmethod
	    def enable(cls):
	        time_stamp.logger.setLevel(logging.DEBUG)


snippet     prototype
abbr        prototype of python script
options     head
	#!/usr/bin/env python
	# coding: utf-8
	"""
	${1:#:purpose}

	===Usage===
	`expand("%:t")` <${2:input}> -o <output>

	===Input===
	<$2> : ${3:input description}
	-o <output> : output file name(default:<$2>.${4:out})

	===Output===
	<output> : ${5:output description}

	"""
	import argparse


	def parse_argument():
	    parser = argparse.ArgumentParser(usage=__doc__)
	    parser.add_argument("$2",
	                        type=str,
	                        default=None,
	                        help="$3")
	    parser.add_argument("-o", "--output",
	                        type=str,
	                        default=None,
	                        help="output file name")
	    arguments = parser.parse_args()
	    if arguments.output is None:
	        arguments.output = arguments.$2 + ".$4"
	    return arguments


	def main():
	    args = parse_argument()

	    ${0:pass}


	if __name__ == "__main__":
	    main()

snippet     function
abbr        initializing python function
options     head
	def ${1:function}(${2:#:argument}):
	    """
	    ===Input===
	    ${3:#:input}
	    ===Output===
	    ${4:#:output}
	    """
	    ${0:pass}


snippet     kaggle
abbr        kaggle initialization
options     head
	#!/usr/bin/env python3
	# coding: utf-8
	"""
	For ${1:`substitute(substitute(expand("%:p"), "/[^/]*/[^/]*$", "", "g"), ".*/", "", "g")`} competition

	Author: Riku Okajima
	Created: `strftime("%Y-%m-%d")`
	"""

	import numpy as np
	import matplotlib.pyplot as plt
	import pandas as pd
	from tqdm import tqdm
	from logging import (getLogger, DEBUG, INFO,
	                     StreamHandler, FileHandler, Formatter)


	def get_logger(name, out=None):
	    formatter = Formatter(
	        "%(asctime)s:%(levelname)s:%(name)s::%(funcName)s::%(message)s")
	    logger = getLogger(name)
	    logger.setLevel(DEBUG)
	    handler = StreamHandler()
	    handler.setLevel(INFO)
	    handler.setFormatter(formatter)
	    logger.addHandler(handler)
	    if out is not None:
	        handler = FileHandler(out)
	        handler.setLevel(DEBUG)
	        handler.setFormatter(formatter)
	        logger.addHandler(handler)
	    return logger


	${0:pass}
